                    标准模板库

STL广义上分 容器 算法(algorithm) 迭代器
STL细分是容器 ,算法,迭代器 仿函数  适配器  空间配置器.

容器通过空间配置器获取数据的存储空间,算法通过迭代器存储容器的内容 访函数可以协助算法完成不同的策略变化,适配器可以修饰仿函数.

STL的有点  高可重用性,高性能, 高移植性


     <<<  容器  >>>
序列式容器 

序列式容器强调值的排序,序列式容器的每个元素都有固定的位置,除非用删除,或插入的操作来该改变这个位置 
vector deque list

关联式容器  

更准确的说是二叉数结构,各元素之间没有严格的物理上的顺序关系, 也即是元素在容器中没有保存元素置入时的顺序     在值中选则一个值作为关键字key 这个关键字起到检索作用,方便查找.   
set  multiset     map     multimap


    <<<  算法   >>>
质变算法 
(是指运算过程中会更改区间中的元素内容, 例如拷贝 替换 更改)
非变质算法 
(是指运算过程中不会更改区间的元素内容 例如查找遍历,计数)


STL 迭代器

类似于指针    依序访问某个容器所包含的各个元素.

输入迭代器   提供对数据的只读功能  只读 支持 ++ == !=
输出迭代器   提供对数据的只写功能   只写  支持 ++
向前迭代器   提供读写操作,并能向前推进迭代器  读写 ++ == !=
双向迭代器   提供读写操作  并能向前和向后操作  读写  支持++ --
随机访问迭代器  提供读写,并能以跳跃的方式访问容器的任意数据,是功能最强的迭代器   读写 ++ == -- < > [n]


例子; vector<int>v 声明一个容器,这个容器里存放int类型数据,对象名称为v
遍历容器中的数据利用迭代器
vector<int>::iterator itbegin=v.begin();
itbegin指向的是v容器中的起始位置

vector<int>::iterator itend = v.end();    
itend指向v容器中最后一个位置的下一个地址


三种遍历方式:

1.while (itbegin != itend)
{
	cout << *itbegin << endl;
	itbegin++;
}


2. for(int i=0;i<10;i++)
for (vector<int>::iterator it = v.begin(); it !=v.end(); it++)
{
	cout << *it << endl;
}

3.  for_each(v.begin(), v.end(), myprint); 回调函数 参数是 对迭代器取*   即 *it    myprint(*itend);
void print(int v)
{
cout<<v<<endl;
}



<<<string>>>
不考虑内存释放和越界
string 构造函数
string(); 默认构造函数
string(const string &str);  //拷贝构造函数
string(const char*s);   /使用字符串来初始化
string (int n,char c);  // 使用n个c来初始化
   string 的基本赋值;
第一种重载了一个=号;
string &operator=(const char*s) //把char*类型的字符串赋值给当前的字符串
string &operator=(cosnt string &s)  把字符串s赋值给当前字符串
string &operator=(char c)          把字符赋值给当前字符串
string &assign=(cosnt char *s)  把字符串s赋值给当前字符串
string &assign(cosnt char*s ,int n)  把字符串s的前n个字符赋值给当前的字符串.
string &assign(cosnt string &s)  把字符串s赋值给当前字符串
string &assign(int n,char c)  把n个c赋值给当前字符串
string &assign(const sting &s ,int start ,int n)  //将s从start 开始n个字符赋给字符串


string 存取字符串 
 char &operator[](int n);  通过[]方式取字符
 char & at(int n); //通过at方法来获取字符
 []和at的区别  [] 访问越界, 直接挂掉   at会抛出异常

string 拼接   +=   +;
string operator+=(const string & str);   操作+=运算符
string operator+=(const char* str);   操作 += 运算符
string operator+=(const char  c);   操作 += 运算符

string &append(const char *s)  //把字符串s接到当前字符串结尾
string &append(const char *s,int n)  //把字符串s的前n个字符接到当前字符串结尾
string &append(const string &s)  //同operator+=;
string &append(const string &s,int pos,int n)  //把字符串s中从pos开始的n个字符连接到当前字符串的结尾
string &append(int n,char c)  //在当前字符串结尾添加n个字符.


string的查找和替换
find从左往右找
int find(const string&str, int pos = 0) const;    //查找str第一次出现的位置,从pos开始查找   找不到返回-1;
int find(const char *s, int pos = 0) const;    //查找s第一次出现的位置,从pos开始找
/int find(const char *s, int pos ,int n) const;    //从pos位置查找s的前n个字符的第一次位置
int find(const char c, int pos = 0) const;    //查找字符c第一次出现的 位置

rfind从右往左找
int rfind(const string&str, int pos =npos) const;    查找str最后一次出现的位置,从pos开始查找.
int rfind(const char *s, int pos = npos) const;    //查找s最后一次出现的位置,从pos开始查找
int rfind(const char *s, int pos,int n ) const;    /,从pos开始查s的前n个字符最后一次的位置
int rfind(const char c,int  pos=0 ) const;    //查找字符c最后一次出现的位置.

string & replace(int pos,int n,const string & str)   替换从pos开始n个字符为字符串str.
string & replace(int pos,int n,const char* str)   替换从pos开始n个字符为字符串s.

compare函数在>时返回1,<时返回-1,==返回0.
比较区分大小写,比较时参考字典顺序,排越前面越小.
大写的A比小写的a小.

string 子串
string substr(int pos=0;int n=npos) const  返回pos开始的n个字符字串的字符串.
string 插入删除
string &insert (int pos,const char *s)   插入字符串
string &insert (int pos,const string & str)   插入字符串
string &insert (int pos,int n,char c)       在指定位置插入n个字符c
string &erase(int pos ,int n=npos);删除从pos开始的n个字符

string 和 c-style 字符串转换
const char * 能隐式类型转换为string.
string不能隐式类型转换为char *
为了修改string 字符串的内容,下标操作符[]和at都会返回字符的引用,但当字符串的内存被从新分配后,可能会发生


**string总结**
   
assign append find  rfind  [] , at size() 
replace  compare













push_back(elem) 包含在:

  *vector 

begin(),end() 包含在:
 
  *vector 

assign(cosnt string &s)  <赋值> 包含在:
  *string


[] , at 包含于:
  *string


size() 包含在:
  *string


find(const char c, int pos = 0)  包含在:
  *string

replace(int pos,int n,const string & str)  包含在:
  *string

